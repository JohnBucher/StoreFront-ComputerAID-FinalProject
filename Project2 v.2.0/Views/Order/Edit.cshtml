@model Store.Data.Order

@using Store.Data;

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Layouts/_Layout1.cshtml";
}

<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>

@section scripts
{
    <script>
//---------------------------------------------------------------------------------------------------------------------------------------
        function RemoveItem(elem) {
        //This Ajax is in charge of calling the remove method while also removing the entry from the list
            $.ajax({
                type: 'POST',
                        url: '@Url.Action("Remove", "Order")',
                        data: { id: elem },
                        success: function (data) {
                            //Remove the deleted item
                            $("#CartItem-" + elem).fadeOut(300);
                        }
        });

        //------------------------------------------
        //After a change in the shopping cart, this Ajax will update the running total cost of all orders
        $.ajax({
                type: 'POST',
                        url: '@Url.Action("UpdateTotal", "Order")',
                        data: { id: elem },
                        success: function (data) {
                            //Update the total count HTML to display the correct amount
                            $('#totalCount').html('$' + data.UpTotal + '');
                        }
            });

    };//End RemoveItem
//---------------------------------------------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------------------------------------------
    function UpdateItem(elem) {
        //This Ajax is in charge of calling the changeQuantity method
        var textValue = $("#textInput-" + elem).val();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("UpdateItemQuantity", "Order")',
                data: { newQuantity: textValue, itemID: elem },
                success: function (data) {
                    //If newly entered quantity is 0 or less, tell the user the error and reset the quantity to what it was BEFORE the
                    //user entered their incorrect value
                    if (data.UpdateQuantity <= 0)
                    {
                        window.alert("A quantity must be greater than 0. You entered: " + data.UpdateQuantity);
                        $('#inputTextBox-' + elem).html('<input class="form-control" id="textInput-' + elem + '" type="text" size="1" value="' + data.oldQuan + '"></input>');
                    }
                    //Else update the HTML with the new subtotal generated by the price * quantity
                    else
                    {
                        $('#subTotalContainer-' + elem).html('$' + data.newSubTotal);
                    }
                }
        });

        //------------------------------------------
        //After a change in the shopping cart, this Ajax will update the running total cost of all orders
        $.ajax({
                type: 'POST',
                        url: '@Url.Action("UpdateTotal", "Order")',
                        data: { id: elem },
                        success: function (data) {
                            //Update the total count HTML to display the correct amount
                            $('#totalCount').html('$' + data.UpTotal + '');
                        }
            });

        };//End UpdateItem
//---------------------------------------------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------------------------------------------
        //In charge of movign the status to the next step when the "Move To The Next Status" button is pressed.
        function incrementStatus(elem)
        {
            $.ajax({
                type: 'POST',
                        url: '@Url.Action("plusStatus", "Order")',
                        data: { id: elem, orderNum: @Model.OrderID },
                        success: function (data) {
                            //Update the number value of status to its new value
                            $('#StatusContainer').html(data.newStatus);
                            //If the new status is 4 (The last step) then remove the button from the user view
                            if (data.StateID == 4)
                            {
                                $('#nextState').html(' ');
                            }
                            //Else the button will remain availible to the user.
                            else {
                                $('#nextState').html(' <button class="btn btn-danger btn-primary" id="save" onclick="incrementStatus('
                                    + data.StateID + ')">Move To The Next Status</button> ');
                            }
                        }
            });
        }//End incrementStatus
//---------------------------------------------------------------------------------------------------------------------------------------

    </script>
}

<h2>Order Admin Details</h2>

<br />
<br />

<div id="tabs">
    <ul class="nav nav-tabs">
        <!-- Three TAB options: General, Address, and Products -->
        <li><a href="#General">General</a></li>
        <li><a href="#Address">Address</a></li>
        <li><a href="#Products">Products</a></li>
    </ul>

    <br />

    <!-- ------------------------------------------------------------------------------------------------------------------------- -->
    <!-- GENERAL TAB -->
    <div id="General">
        <dl class="dl-horizontal">
            <br />
            <!-- OrderID -->
            <dt>
                @Html.DisplayName("OrderID: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.OrderID)
            </dd>
            <!-- UserName -->
            <dt>
                @Html.DisplayName("Username: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.User.UserName)
            </dd>
            <!-- EmailAddress -->
            <dt>
                @Html.DisplayName("EmailAddress: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.User.EmailAddress)
            </dd>
            <!-- OrderDate -->
            <dt>
                @Html.DisplayName("OrderDate: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.OrderDate)
            </dd>
            <!-- Total -->
            <dt>
                @Html.DisplayName("Total: ")
            </dt>
            <dd id="totalCount">
                $@Html.DisplayFor(model => model.Total)
            </dd>
            <!-- Status -->
            <dt>
                @Html.DisplayName("Status: ")
            </dt>
            <dd id="StatusContainer">
                @Html.DisplayFor(model => model.Status.StatusDescription)
            </dd>
            <!-- Move To The Next Status Button -->
            <dt>
                @Html.DisplayName(" ")
            </dt>
            <dd>
                @if (Model.StatusID < 4)
                {
                    <div id="nextState" style="float: right; padding-right: 100px">
                        <button id="save" class="btn btn-danger btn-primary" OnClick="incrementStatus(@Model.StatusID)">Move To The Next Status</button>
                    </div>

                    <br style="clear:both" />
                }
            </dd>
        </dl>
    </div>
    <!-- ------------------------------------------------------------------------------------------------------------------------- -->


    <!-- ------------------------------------------------------------------------------------------------------------------------- -->
    <!-- ADDRESS TAB -->
    <div id="Address">
        <br />
        <dl class="dl-horizontal">
            <!-- AddressID -->
            <dt>
                @Html.DisplayName("AddressID: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AddressID)
            </dd>
            <!-- UserID -->
            <dt>
                @Html.DisplayName("UserID: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserID)
            </dd>
            <!-- Address 1 -->
            <dt>
                @Html.DisplayName("Address 1: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Address.Address1)
            </dd>
            <!-- Address 2 -->
            <dt>
                @Html.DisplayName("Address 2: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Address.Address2)
            </dd>
            <!-- Address 3 -->
            <dt>
                @Html.DisplayName("Address 3: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Address.Address3)
            </dd>
            <!-- City -->
            <dt>
                @Html.DisplayName("City: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Address.City)
            </dd>
            <!-- State -->
            <dt>
                @Html.DisplayName("State: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Address.State.StateAbbrev)
            </dd>
            <!-- Zip Code -->
            <dt>
                @Html.DisplayName("ZipCode: ")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Address.ZipCode)
            </dd>
        </dl>
    </div>
    <!-- ------------------------------------------------------------------------------------------------------------------------- -->


    <!-- ------------------------------------------------------------------------------------------------------------------------- -->
    <!-- PRODUCTS TAB -->
    <div id="Products">
        @{ 
            //Create a list of OrderProducts based on the current UserID
            int temporary = Convert.ToInt32(Session["UserID"].ToString());

            var orderProductList = Model.OrderProducts.ToList();
        }
        <!-- Render a partial view in order to display the OrderProduct list pertaining to this specific order -->
        @Html.Partial("PartialProductCart", orderProductList)
    </div>
    <!-- ------------------------------------------------------------------------------------------------------------------------- -->

</div>

    <script>
        //Enables the tabination used earlier in the program
        $('#tabs').tabs()
    </script>

<br style="clear:both" />



