@model IEnumerable<Store.Data.ShoppingCartProduct>

@{
    ViewBag.Title = "Cart";
    Layout = "~/Views/Layouts/_Layout1.cshtml";
}

<script src="~/Scripts/jquery-1.12.4.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>

@section scripts
{
<script>
    //AJAX FUNCTIONS

//---------------------------------------------------------------------------------------------------------------------------------------
    function RemoveItem(elem) {
        //This Ajax is in charge of calling the remove method while also removing the entry from the list
            $.ajax({
                type: 'POST',
                        url: '@Url.Action("Remove", "ShoppingCart")',
                        data: { id: elem },
                        success: function (data) {
                            //Remove the deleted item
                            $("#CartItem-" + elem).fadeOut(300);
                        }
        });
        //--------------------------------------------------
        //After a change in the shopping cart, this Ajax will update the running total cost of all orders
        $.ajax({
                type: 'POST',
                        url: '@Url.Action("UpdateTotal", "ShoppingCart")',
                        data: { id: elem },
                        success: function (data) {
                            //Update the total count HTML to display the correct amount
                            $('#totalCount').html('$' + data.UpTotal);
                        }
            });
        //--------------------------------------------------
        //After a change, this Ajax will update the Shopping Cart quantity count that is displayed alongside the Shopping Cart Button
        $.ajax({
                type: 'POST',
                        url: '@Url.Action("UpdateQuantity", "ShoppingCart")',
                        data: { id: elem },
                        success: function (data) {
                            //Change the Shopping Cart HTML to display the updated quantity
                            $('#quantityContainer').html('<a href="/ShoppingCart/Cart">(' + data.UpQuantity + ') Shopping Cart</a>');
                        }
            });
    };//End RemoveItem
//---------------------------------------------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------------------------------------------
    function UpdateItem(elem) {
        //This Ajax is in charge of calling the changeQuantity method
        var textValue = $("#textInput-" + elem).val();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("UpdateItemQuantity", "ShoppingCart")',
                data: { newQuantity: textValue, itemID: elem },
                success: function (data) {
                    //If newly entered quantity is 0 or less, tell the user the error and reset the quantity to what it was BEFORE the
                    //user entered their incorrect value
                    if (data.UpdateQuantity <= 0)
                    {
                        window.alert("A quantity must be greater than 0. You entered: " + data.UpdateQuantity);
                        $('#inputTextBox-' + elem).html('<input class="form-control" id="textInput-' + elem + '" type="text" size="1" value="' + data.oldQuan + '"></input>');
                    }
                    //Else update the HTML with the new subtotal generated by the price * quantity
                    else
                    { $('#subTotalContainer-' + elem).html('$' + data.newSubTotal); }
                }
        });
        //--------------------------------------------------
        //After a change in the shopping cart, this Ajax will update the running total cost of all orders
        $.ajax({
                type: 'POST',
                        url: '@Url.Action("UpdateTotal", "ShoppingCart")',
                        data: { id: elem },
                        success: function (data) {
                            //Update the total count HTML to display the correct amount
                            $('#totalCount').html('$' + data.UpTotal + '');
                        }
            });
        //--------------------------------------------------
        //After a change, this Ajax will update the Shopping Cart quantity count that is displayed alongside the Shopping Cart Button
        $.ajax({
                type: 'POST',
                        url: '@Url.Action("UpdateRunningTotal", "ShoppingCart")',
                        data: { newQuantity: textValue, id: elem },
                        success: function (data) {
                            //Change the Shopping Cart HTML to display the updated quantity
                            if (textValue > 0) { $('#quantityContainer').html('<a href="/ShoppingCart/Cart">(' + data.UpQuantity + ') Shopping Cart</a>'); }
                        }
            });
    };//End UpdateItem
//---------------------------------------------------------------------------------------------------------------------------------------

</script>
}

<h2>Shopping Cart</h2>
<!-- In charge of displaying the ShoppingCart that is assigned to the current user -->
<div id="divProducts">
    <table class="table">
        <tr>
            <th>
                @Html.DisplayName("Product Name")
            </th>
            <th>
                @Html.DisplayName("Quantity")
            </th>
            <th>
                @Html.DisplayName(" ")
            </th>
            <th>
                @Html.DisplayName("Price")
            </th>
            <th>
                @Html.DisplayName("Image")
            </th>
            <th>
                @Html.DisplayName("Sub Total")
            </th>
            <th>
                @Html.DisplayName(" ")
            </th>
            <th>
                @Html.DisplayName(" ")
            </th>
            <th></th>
        </tr>
        @foreach (var item in Model)
        {
            //Hold the Address of the Image File to use later
            string hold = item.Product.ImageFile;

            <tr id="CartItem-@item.ShoppingCartProductID">
                <!-- ProductName -->
                <td>
                    @Html.DisplayFor(modelItem => item.Product.ProductName)
                </td>
                <!-- ItemQuantityTextBox -->
                <td id="inputTextBox-@item.ShoppingCartProductID">
                    <input type="text" class="form-control" id="textInput-@item.ShoppingCartProductID" value="@item.Quantity" size="1">
                </td>
                <!-- UpdateCartButton -->
                <th>
                    <button id="upDateCart-@item.ShoppingCartProductID" class="btn btn-danger btn-primary"
                            OnClick="UpdateItem(@item.ShoppingCartProductID)" data-assigned-id="@item.Quantity">Update Cart</button>
                </th>
                <!-- Price -->
                <td>
                    @{
                        decimal temp2 = (decimal)(item.Product.Price);
                        string give2 = "$" + temp2.ToString("0.00");
                    }
                    @Html.DisplayFor(modelItem => give2)
                </td>
                <!-- Image -->
                <td>
                    <img src="@Url.Content(hold)" style="max-height: 120px" />
                </td>
                <!-- Subtotal -->
                <td id="subTotalContainer-@item.ShoppingCartProductID">
                    @{
                        decimal temp3 = (decimal)(item.Product.Price * item.Quantity);
                        string give3 = "$" + temp3.ToString("0.00");
                    }
                    @Html.DisplayFor(modelItem => give3)
                </td>
                <!-- DeleteButton -->
                <td>
                    <button id="btn-@item.ShoppingCartProductID" class="btn btn-danger btn_remove" 
                            OnClick="RemoveItem(@item.ShoppingCartProductID)" data-assigned-id="@item.ShoppingCartProductID">X</button>
                </td>
            </tr>
       }
    </table>

    <!-- Total Cost of all items -->
    <h4> Total: </h4>
    <h4 id="totalCount" style="float: left">$@Session["Total"]</h4>

    <!-- If the current user and ShoppingCart have items which total more than $0, they are then able to place an order -->
    @if (Convert.ToDecimal(Session["Total"].ToString()) != 0)
    {
        <!-- PlaceOrderButton -->
        <div style="float: right">
            <button id="placeOrder" class="btn btn-danger btn-primary" OnClick="window.location.href='@Url.Action("Address", "Order")'">Place Order</button>
        </div>
    }
    <br />
    <br />
    <br />
    <br />

    <!-- Return to list of products link -->
    @Html.ActionLink("Continue Shopping", "Index", "Products")
</div>
